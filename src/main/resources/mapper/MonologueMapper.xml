<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.nj.secretary.services.monologue.service.MonologueService">

<!--    type=vo,dto,domain 파일명      id=내가 사용ㅇ할 이름 임의로 정하면 됨 -->
    <resultMap type="com.nj.secretary.services.monologue.domain.Question" id="question">
<!--        property=필드 변수명      column=칼럼에 넣어준 칼럼명 -->
              
       <result property="questionText"   column="question_text" jdbcType="VARCHAR"/>
       <result property="questionId"   column="question_id" jdbcType="INTEGER"/>
    </resultMap>


	<insert id="addQuestion"
		parameterType="com.nj.secretary.services.monologue.domain.Question">

		INSERT INTO questions (question_id,question_text)
		VALUES (questions_seq.NEXTVAL,#{questionText})

	</insert> 
	
	
	<select id="getQuestionId" parameterType="integer" resultMap="question">

	   SELECT question_id
       FROM questions
	   WHERE question_id=#{questionId}
	
	</select>
	
	
	<select id="getQuestionText" parameterType="integer" resultMap="question">
   
     SELECT question_text,question_id
   	 FROM questions
   	 WHERE question_id=#{questionId}
	
	</select>
	
	
	<delete id="deleteQuestion"  parameterType="com.nj.secretary.services.monologue.domain.Question" >

	DELETE
	FROM questions
	WHERE question_id=#{questionId}
	
	</delete>
	
	
	<select id="getQuestionList"  parameterType="com.nj.secretary.services.monologue.domain.Question" resultMap="question">
	  SELECT * FROM questions
	  ORDER BY  question_id ASC
		
	 
     </select>



<!--    type=vo,dto,domain 파일명      id=내가 사용ㅇ할 이름 임의로 정하면 됨 -->
    <resultMap type="com.nj.secretary.services.monologue.domain.Monologue" id="monologue">
<!--        property=필드 변수명      column=칼럼에 넣어준 칼럼명 -->
              
       <result property="userId"       column="user_id" jdbcType="VARCHAR"/>
       <result property="monologueText"   column="monologue_text" jdbcType="VARCHAR"/>
       <result property="monologueId"   column="monologue_id" jdbcType="INTEGER"/>
       <result property="reportCount"   column="report_count" jdbcType="INTEGER"/>
       <result property="shareStatus"   column="share_status" jdbcType="CHAR"/>
       <result property="blindStatus"   column="blind_status" jdbcType="CHAR"/>
       <result property="monologueDate"   column="monologue_date" jdbcType="DATE"/>

       <result property="questionId"   column="question_id" jdbcType="INTEGER"/>

      <result property="reportReasonId" column="report_reason_id" jdbcType="CHAR"/>
      <result property="reporterId" column="reporter_id" jdbcType="VARCHAR"/>
      <result property="reportDate" column="report_date" jdbcType="DATE"/>
      <result property="reportText" column="report_text" jdbcType="VARCHAR"/>
      <result property="questionText" column="question_text" jdbcType="VARCHAR"/>

    </resultMap>
    
    
    
	<insert id="addMonologue" parameterType="com.nj.secretary.services.monologue.domain.Monologue">
 	   INSERT INTO monologue (user_id,monologue_text,monologue_id,report_count,share_status,blind_status,monologue_date,question_id)
       VALUES (#{userId},#{monologueText},monologue_seq.NEXTVAL,DEFAULT,#{shareStatus},DEFAULT,SYSDATE, 
       (SELECT question_id
        FROM questions
        WHERE question_id=#{questionId}))
	                
   </insert>
   
   
   <update id="updateMonologue" parameterType="com.nj.secretary.services.monologue.domain.Monologue">

	UPDATE monologue
	SET monologue_text=#{monologueText}, share_status=#{shareStatus}
	WHERE monologue_id=#{monologueId}
   
   </update>                      
   
   
   
   <delete id="deleteMonologue"  parameterType="com.nj.secretary.services.monologue.domain.Monologue" >

	DELETE
	FROM monologue
	WHERE monologue_id=#{monologueId}
   
   </delete>
  
  <select id="getReportedMonoList" resultMap="monologue">
		select DISTINCT q.question_text, m.user_id, m.monologue_id, m.monologue_text, m.report_count, m.blind_status
		from monologue m, questions q
		where m.question_id = q.question_id and report_count >= 3
	</select>
   
   

   <select id="getMonologue"  parameterType="com.nj.secretary.services.monologue.domain.Monologue" resultMap="monologue">
	
	SELECT m.user_id, m.monologue_text, m.monologue_id, m.report_count, m.share_status, m.blind_status, m.monologue_date, q.question_id, q.question_text 
    FROM monologue m, questions q
    WHERE q.question_id=#{questionId} AND m.monologue_id=#{monologueId}
    </select>
    
    <select id="getMonologueList" parameterType="com.nj.secretary.services.monologue.domain.Monologue" resultMap="monologue">
     	SELECT q.question_id, q.question_text, m.question_id, m.monologue_id, m.monologue_text
     	FROM monologue m, questions q
     	WHERE q.question_id=m.question_id AND user_id=#{userId}
	    ORDER BY monologue_date ASC

    </select>
    
	<select id="getShareMonologueList" parameterType="com.nj.secretary.services.monologue.domain.Monologue" resultMap="monologue">
	    SELECT q.question_id, q.question_text, m.question_id, m.monologue_id, m.monologue_text
     	FROM monologue m, questions q
     	WHERE q.question_id=m.question_id AND user_id=#{userId} AND share_status=1
	    ORDER BY monologue_date ASC

	</select>
	
	<select id="getOtherMonologueList" parameterType="com.nj.secretary.services.monologue.domain.Monologue" resultMap="monologue">
    	 SELECT q.question_id, q.question_text, m.question_id, m.monologue_id, m.monologue_text
	     FROM monologue m, questions q
	     WHERE q.question_id=m.question_id AND user_id NOT IN #{userId} AND share_status=1
	     ORDER BY monologue_date ASC;
	</select>
	
   <update id="setBlindMonologue" parameterType="Integer">
	   {
		CALL
	       BEGIN
			UPDATE (
	   		select u.user_id AS user_id, u.blind_count AS blind_count, m.monologue_id AS monologue_id, m.blind_status AS blind_status
	  		from monologue m, users u where m.user_id = u.user_id and m.monologue_id=#{value}) m
	   		SET m.blind_status='1';
		   MERGE INTO users u
		   USING	(select u.user_id AS user_id, u.blind_count AS blind_count, m.monologue_id AS monologue_id, m.blind_status AS blind_status
		   from monologue m, users u where m.user_id = u.user_id and m.monologue_id=#{value}) m
		   ON (u.user_id = m.user_id)
		   WHEN MATCHED THEN
			   UPDATE SET u.blind_count = m.blind_count + 1;
	       END
		   }

   </update>

	<select id="getMonologueReportReason" parameterType="integer" resultMap="monologue">
		SELECT report_reason_id, reporter_id, report_date, report_text
		FROM report
		WHERE monologue_id = #{value}
	</select>

	<select id="randomCheck" parameterType="com.nj.secretary.services.monologue.domain.Monologue" resultType="integer">
		select count(m.user_id)
		FROM questions q, monologue m
		WHERE m.user_id=#{userId} and q.question_id=#{questionId} and m.question_id = q.question_id
	</select>

</mapper>





